# STEP_ONE Extracting Previous Results

cell(first_row, seventh_column)
first_row_candidates = [2,3,4,5,6,7,8]
seventh_column_candidates = [2,3,5,6,7,8]
top_right_block_candidates = [3,5,6,7,8]

cell(second_row, fifth_column)
second_row_candidates = [1,7,8]
fifth_column_candidates = [2,3,4,6,7,9]
top_middle_block_candidates = [1,3,4,5,6,7]

cell(second_row, ninth_column)
second_row_candidates = [1,7,8]
ninth_column_candidates = [3,4,5,6,8,9]
top_right_block_candidates = [3,5,6,7,8]

# STEP_TWO Calculating the candidates of each cell

## Cell 1 of 3
cell(first_row, seventh_column):

first_row_candidates.length = 7
seventh_column_candidates.length = 7
top_right_block_candidates.length = 5

shortest_list = top_right_block_candidates = digits to search

first_row_candidates = [2,3,4,5,6,7,8], broken into first_row_candidates_low = [2,3,4,5] and first_row_candidates_high = [6,7,8]
seventh_column_candidates = [2,3,5,6,7,8], broken into seventh_column_candidates_low = [2,3,5] and seventh_column_candidates_high = [6,7,8]
top_right_block_candidates = [3,5,6,7,8], broken into top_right_block_candidates_low = [3,5] and top_right_block_candidates_high = [6,7,8]

Checking top_right_block_candidates_low digits against: first_row_candidates_low and seventh_column_candidates_low
3: [2,3,4,5].count(3) = 1, [2,3,5].count(3) = 1, total_count(3) = 2 FOUND A CANDIDATE
5: [2,3,4,5].count(5) = 1, [2,3,5].count(5) = 1, total_count(5) = 2 FOUND A CANDIDATE

Checking top_right_block_candidates_high digits against: first_row_candidates_high and seventh_column_candidates_high
6: [6,7,8].count(6) = 1, [6,7,8].count(6) = 1, total_count(6) = 2 FOUND A CANDIDATE
7: [6,7,8].count(7) = 1, [6,7,8].count(7) = 1, total_count(7) = 2 FOUND A CANDIDATE
8: [6,7,8].count(8) = 1, [6,7,8].count(8) = 1, total_count(8) = 2 FOUND A CANDIDATE

Confirmed candidates found for cell(first_row, seventh_column): [3,5,6,7,8]

## Cell 2 of 3
cell(second_row, fifth_column):

second_row_candidates.length = 3
fifth_column_candidates.length = 6
top_middle_block_candidates.length = 7

shortest_list = second_row_candidates = digits to search

second_row_candidates = [1,7,8], broken into second_row_candidates_low = [1] and second_row_candidates_high = [7,8]
fifth_column_candidates = [2,3,4,6,7,9], broken into fifth_column_candidates_low = [2,3,4] and fifth_column_candidates_high = [6,7,9]
top_middle_block_candidates = [1,3,4,5,6,7], broken into top_middle_block_candidates_low = [1,3,4,5] and top_middle_block_candidates_high = [6,7]

Checking second_row_candidates_low digits against: fifth_column_candidates_low and top_middle_block_candidates_low
1: [2,3,4].count(1) = 0, [1,3,4,5].count(1) = 1, total_count(1) = 1

Checking second_row_candidates_high digits against: fifth_column_candidates_high and top_middle_block_candidates_high
7: [6,7,9].count(7) = 1, [6,7].count(7) = 1, total_count(7) = 2 FOUND A CANDIDATE
8: [6,7,9].count(8) = 0, [6,7].count(8) = 0, total_count(8) = 0

Confirmed candidates found for cell(second_row, fifth_column): [7]

## Cell 3 of 3
cell(second_row, ninth_column):

second_row_candidates.length = 3
ninth_column_candidates.length = 6
top_right_block_candidates.length = 5

shortest_list = second_row_candidates = digits to search

second_row_candidates = [1,7,8], broken into second_row_candidates_low = [1] and second_row_candidates_high = [7,8]
ninth_column_candidates = [3,4,5,6,8,9], broken into ninth_column_candidates_low = [3,4,5] and ninth_column_candidates_high = [6,8,9]
top_right_block_candidates = [3,5,6,7,8], broken into top_right_block_candidates_low = [3,5] and top_right_block_candidates_high = [6,7,8]

Checking second_row_candidates_low digits against: ninth_column_candidates_low and top_right_block_candidates_low
1: [3,4,5].count(1) = 0, [3,5].count(1) = 0, total_count(1) = 0

Checking second_row_candidates_high digits against: ninth_column_candidates_high and top_right_block_candidates_high
7: [6,8,9].count(7) = 0, [6,7,8].count(7) = 1, total_count(7) = 1
8: [6,8,9].count(8) = 1, [6,7,8].count(8) = 1, total_count(8) = 2 FOUND A CANDIDATE

Confirmed candidates found for cell(second_row, ninth_column): [8]

# STEP_THREE Checking the number of elements in each cell

cell(first_row, seventh_column): [3,5,6,7,8]
[3,5,6,7,8].length = 5
length is 5, not 1, Rejected

cell(second_row, fifth_column): [7]
[7].length = 1
length is 1, Passes

cell(second_row, ninth_column): [8]
[8].length = 1
length is 1, Passes

## Passing Cells
cell(second_row, fifth_column): [7]
cell(second_row, ninth_column): [8]

# STEP_FOUR: Grouping Cells with Corresponding Rows

second_row: [3,6,5,0,0,2,4,9,0]
cell(second_row, fifth_column): [7]

second_row: [3,6,5,0,0,2,4,9,0]
cell(second_row, ninth_column): [8]

# STEP_FIVE: Applying Cell Updates to Rows

second_row: [3,6,5,0,0,2,4,9,0]
cell(second_row, fifth_column): [7]
The 5th position of the row is 0, so we can proceed.
The first 5 positions are [3,6,5,0,0]
[3,6,5,0,0].count(0) = 2
Updating the value in the 5th position, which is the 2nd zero in the row:
updated_second_row: [3,6,5,7,0,2,4,9,0]

second_row: [3,6,5,7,0,2,4,9,0]
cell(second_row, ninth_column): [8]
The 9th position of the row is 0, so we can proceed.
The first 9 positions are [3,6,5,7,0,2,4,9,0]
[3,6,5,7,0,2,4,9,0].count(0) = 2
Updating the value in the 9th position, which is the 2nd zero in the row:
updated_second_row: [3,6,5,7,0,2,4,9,8]

# STEP_SIX: Printing the Updated Sudoku

The rows to update are first_row and second_row
Using the contents of updated_first_row and updated_second_row
first_row: [0,0,9,0,0,0,0,0,1]
second_row: [3,6,5,7,0,2,4,9,8]
third_row: [0,0,0,0,8,9,0,2,0]
fourth_row: [0,9,7,0,1,4,0,0,2]
fifth_row: [0,3,0,0,0,0,9,0,0]
sixth_row: [0,2,6,5,0,0,0,8,0]
seventh_row: [0,0,0,0,0,0,0,3,0]
eighth_row: [6,0,2,3,0,8,1,0,0]
ninth_row: [0,1,0,0,5,0,0,4,7]

# STEP_SEVEN: Shifting the Rows of the Sudoku

fourth_row: [0,9,7,0,1,4,0,0,2]
fifth_row: [0,3,0,0,0,0,9,0,0]
sixth_row: [0,2,6,5,0,0,0,8,0]
seventh_row: [0,0,0,0,0,0,0,3,0]
eighth_row: [6,0,2,3,0,8,1,0,0]
ninth_row: [0,1,0,0,5,0,0,4,7]
first_row: [0,0,9,0,0,0,0,0,1]
second_row: [3,6,5,7,0,2,4,9,8]
third_row: [0,0,0,0,8,9,0,2,0]

# STEP_EIGHT Fixing the Row Names and Outputting the Sudoku

<Output>
first_row: [0,9,7,0,1,4,0,0,2]
second_row: [0,3,0,0,0,0,9,0,0]
third_row: [0,2,6,5,0,0,0,8,0]
fourth_row: [0,0,0,0,0,0,0,3,0]
fifth_row: [6,0,2,3,0,8,1,0,0]
sixth_row: [0,1,0,0,5,0,0,4,7]
seventh_row: [0,0,9,0,0,0,0,0,1]
eighth_row: [3,6,5,7,0,2,4,9,8]
ninth_row: [0,0,0,0,8,9,0,2,0]
</Output>
# STEP_ONE Extracting Previous Results
cell(second_row, fourth_column)
second_row_candidates = [1]
fourth_column_candidates = [1,2,4,6,7,8,9]
top_middle_block_candidates = [1,3,4,5,6]

cell(fourth_row, fourth_column)
fourth_row_candidates = [3,5,6,8]
fourth_column_candidates = [1,2,4,6,7,8,9]
middle_middle_block_candidates = [1,3,4,5,6]

# STEP_TWO Calculating the candidates of each cell
## Cell 1 of 2
cell(second_row, fourth_column):
second_row_candidates.length = 1
fourth_column_candidates.length = 7
top_middle_block_candidates.length = 5

shortest_list = second_row_candidates = digits to search

second_row_candidates = [1], broken into second_row_candidates_low = [1] and second_row_candidates_high = []
fourth_column_candidates = [1,2,4,6,7,8,9], broken into fourth_column_candidates_low = [1,2,4] and fourth_column_candidates_high = [6,7,8,9]
top_middle_block_candidates = [1,3,4,5,6], broken into top_middle_block_candidates_low = [1,3,4,5] and top_middle_block_candidates_high = [6]

Checking second_row_candidates_low digits against: fourth_column_candidates_low and top_middle_block_candidates_low
1: [1,2,4].count(1) = 1, [1,3,4,5].count(1) = 1, total_count(1) = 2 FOUND A CANDIDATE

Checking second_row_candidates_high digits against: fourth_column_candidates_high and top_middle_block_candidates_high

Confirmed candidates found for cell(second_row, fourth_column): [1]

## Cell 2 of 2
cell(fourth_row, fourth_column):
fourth_row_candidates.length = 4
fourth_column_candidates.length = 7
middle_middle_block_candidates.length = 5

shortest_list = fourth_row_candidates = digits to search

fourth_row_candidates = [3,5,6,8], broken into fourth_row_candidates_low = [3,5] and fourth_row_candidates_high = [6,8]
fourth_column_candidates = [1,2,4,6,7,8,9], broken into fourth_column_candidates_low = [1,2,4] and fourth_column_candidates_high = [6,7,8,9]
middle_middle_block_candidates = [1,3,4,5,6], broken into middle_middle_block_candidates_low = [1,3,4,5] and middle_middle_block_candidates_high = [6]

Checking fourth_row_candidates_low digits against: fourth_column_candidates_low and middle_middle_block_candidates_low
3: [1,2,4].count(3) = 0, [1,3,4,5].count(3) = 1, total_count(3) = 1
5: [1,2,4].count(5) = 0, [1,3,4,5].count(5) = 1, total_count(5) = 1

Checking fourth_row_candidates_high digits against: fourth_column_candidates_high and middle_middle_block_candidates_high
6: [6,7,8,9].count(6) = 1, [6].count(6) = 1, total_count(6) = 2 FOUND A CANDIDATE
8: [6,7,8,9].count(8) = 1, [6].count(8) = 0, total_count(8) = 1

Confirmed candidates found for cell(fourth_row, fourth_column): [6]

# STEP_THREE Checking the number of elements in each cell
cell(second_row, fourth_column): [1]
[1].length = 1
length is 1, Passes

cell(fourth_row, fourth_column): [6]
[6].length = 1
length is 1, Passes

## Passing Cells
cell(second_row, fourth_column): [1]
cell(fourth_row, fourth_column): [6]

# STEP_FOUR: Grouping Cells with Corresponding Rows
second_row: [3,6,5,0,7,2,4,9,8]
cell(second_row, fourth_column): [1]

fourth_row: [0,9,7,0,1,4,0,0,2]
cell(fourth_row, fourth_column): [6]

# STEP_FIVE: Applying Cell Updates to Rows
## 1 of 2
second_row: [3,6,5,0,7,2,4,9,8]
cell(second_row, fourth_column): [1]
The 4th position of the second_row is 0, so we can proceed.
There are 4 - 1 = 3 elements before the current cell
There are also 9 - 4 = 5 elements after the current cell
We break the current row into three groups of 3, then 1, then 5 elements
second_row_isolated = [3,6,5] + [0] + [7,2,4,9,8]
Then we update middle isolated cell to become a [1]
updated_second_row_isolated = [3,6,5] + [1] + [7,2,4,9,8]
updated_second_row = [3,6,5][1][7,2,4,9,8]
updated_second_row = [3,6,5,1,7,2,4,9,8]

## 2 of 2
fourth_row: [0,9,7,0,1,4,0,0,2]
cell(fourth_row, fourth_column): [6]
The 4th position of the fourth_row is 0, so we can proceed.
There are 4 - 1 = 3 elements before the current cell
There are also 9 - 4 = 5 elements after the current cell
We break the current row into three groups of 3, then 1, then 5 elements
fourth_row_isolated = [0,9,7] + [0] + [1,4,0,0,2]
Then we update middle isolated cell to become a [6]
updated_fourth_row_isolated = [0,9,7] + [6] + [1,4,0,0,2]
updated_fourth_row = [0,9,7][6][1,4,0,0,2]
updated_fourth_row = [0,9,7,6,1,4,0,0,2]

# STEP_SIX: Printing the Updated Sudoku
The rows to update are second_row and fourth_row
Using the contents of updated_second_row and updated_fourth_row
first_row: [0,0,9,0,0,0,0,0,1]
second_row: [3,6,5,1,7,2,4,9,8]
third_row: [0,0,0,0,8,9,0,2,0]
fourth_row: [0,9,7,6,1,4,0,0,2]
fifth_row: [0,3,0,0,0,0,9,0,0]
sixth_row: [0,2,6,5,0,0,0,8,0]
seventh_row: [0,0,0,0,0,0,0,3,0]
eighth_row: [6,0,2,3,0,8,1,0,0]
ninth_row: [0,1,0,0,5,6,0,4,7]

# STEP_SEVEN: Shifting the Rows of the Sudoku
fourth_row: [0,9,7,6,1,4,0,0,2]
fifth_row: [0,3,0,0,0,0,9,0,0]
sixth_row: [0,2,6,5,0,0,0,8,0]
seventh_row: [0,0,0,0,0,0,0,3,0]
eighth_row: [6,0,2,3,0,8,1,0,0]
ninth_row: [0,1,0,0,5,6,0,4,7]
first_row: [0,0,9,0,0,0,0,0,1]
second_row: [3,6,5,1,7,2,4,9,8]
third_row: [0,0,0,0,8,9,0,2,0]

# STEP_EIGHT Fixing the Row Names and Outputting the Sudoku
<Output>
first_row: [0,9,7,6,1,4,0,0,2]
second_row: [0,3,0,0,0,0,9,0,0]
third_row: [0,2,6,5,0,0,0,8,0]
fourth_row: [0,0,0,0,0,0,0,3,0]
fifth_row: [6,0,2,3,0,8,1,0,0]
sixth_row: [0,1,0,0,5,6,0,4,7]
seventh_row: [0,0,9,0,0,0,0,0,1]
eighth_row: [3,6,5,1,7,2,4,9,8]
ninth_row: [0,0,0,0,8,9,0,2,0]
</Output>
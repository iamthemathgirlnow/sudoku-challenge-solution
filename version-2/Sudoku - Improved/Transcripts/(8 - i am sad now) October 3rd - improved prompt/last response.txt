# STEP_ONE Extracting Previous Results
cell(first_row, fourth_column)
first_row_candidates = [1,2,3,5,6,7,9]
fourth_column_candidates = [4,5,6]
top_middle_block_candidates = [3,4,5,7,9]

cell(first_row, fifth_column)
first_row_candidates = [1,2,3,5,6,7,9]
fifth_column_candidates = [1,2,4,7]
top_middle_block_candidates = [3,4,5,7,9]

cell(second_row, second_column)
second_row_candidates = [2,3,4,5,7,8]
second_column_candidates = [8,9]
top_left_block_candidates = [2,3,6,7,8]

# STEP_TWO Calculating the candidates of each cell
## Cell 1 of 3
cell(first_row, fourth_column):

first_row_candidates.length = 7
fourth_column_candidates.length = 3
top_middle_block_candidates.length = 5

shortest_list = fourth_column_candidates = digits to search

first_row_candidates = [1,2,3,5,6,7,9], broken into first_row_candidates_low = [1,2,3] and first_row_candidates_high = [5,6,7,9]
fourth_column_candidates = [4,5,6], broken into fourth_column_candidates_low = [4] and fourth_column_candidates_high = [5,6]
top_middle_block_candidates = [3,4,5,7,9], broken into top_middle_block_candidates_low = [3,4] and top_middle_block_candidates_high = [5,7,9]

Checking fourth_column_candidates_low digits against: first_row_candidates_low and top_middle_block_candidates_low
4: [1,2,3].count(4) = 0, [3,4].count(4) = 1, total_count(4) = 1

Checking fourth_column_candidates_high digits against: first_row_candidates_high and top_middle_block_candidates_high
5: [5,6,7,9].count(5) = 1, [5,7,9].count(5) = 1, total_count(5) = 2 FOUND A CANDIDATE
6: [5,6,7,9].count(6) = 1, [5,7,9].count(6) = 0, total_count(6) = 1

Confirmed candidates found for cell(first_row, fourth_column): [5]

## Cell 2 of 3
cell(first_row, fifth_column):

first_row_candidates.length = 7
fifth_column_candidates.length = 4
top_middle_block_candidates.length = 5

shortest_list = fifth_column_candidates = digits to search

first_row_candidates = [1,2,3,5,6,7,9], broken into first_row_candidates_low = [1,2,3] and first_row_candidates_high = [5,6,7,9]
fifth_column_candidates = [1,2,4,7], broken into fifth_column_candidates_low = [1,2,4] and fifth_column_candidates_high = [7]
top_middle_block_candidates = [3,4,5,7,9], broken into top_middle_block_candidates_low = [3,4] and top_middle_block_candidates_high = [5,7,9]

Checking fifth_column_candidates_low digits against: first_row_candidates_low and top_middle_block_candidates_low
1: [1,2,3].count(1) = 1, [3,4].count(1) = 0, total_count(1) = 1
2: [1,2,3].count(2) = 1, [3,4].count(2) = 0, total_count(2) = 1
4: [1,2,3].count(4) = 0, [3,4].count(4) = 1, total_count(4) = 1

Checking fifth_column_candidates_high digits against: first_row_candidates_high and top_middle_block_candidates_high
7: [5,6,7,9].count(7) = 1, [5,7,9].count(7) = 1, total_count(7) = 2 FOUND A CANDIDATE

Confirmed candidates found for cell(first_row, fifth_column): [7]

## Cell 3 of 3
cell(second_row, second_column):

second_row_candidates.length = 6
second_column_candidates.length = 2
top_left_block_candidates.length = 5

shortest_list = second_column_candidates = digits to search

second_row_candidates = [2,3,4,5,7,8], broken into second_row_candidates_low = [2,3,4] and second_row_candidates_high = [5,7,8]
second_column_candidates = [8,9], broken into second_column_candidates_low = [] and second_column_candidates_high = [8,9]
top_left_block_candidates = [2,3,6,7,8], broken into top_left_block_candidates_low = [2,3] and top_left_block_candidates_high = [6,7,8]

Checking second_column_candidates_low digits against: second_row_candidates_low and top_left_block_candidates_low
No digits to check.

Checking second_column_candidates_high digits against: second_row_candidates_high and top_left_block_candidates_high
8: [5,7,8].count(8) = 1, [6,7,8].count(8) = 1, total_count(8) = 2 FOUND A CANDIDATE
9: [5,7,8].count(9) = 0, [6,7,8].count(9) = 0, total_count(9) = 0

Confirmed candidates found for cell(second_row, second_column): [8]

# STEP_THREE Checking the number of elements in each cell
cell(first_row, fourth_column): [5]
[5].length = 1
length is 1, Passes

cell(first_row, fifth_column): [7]
[7].length = 1
length is 1, Passes

cell(second_row, second_column): [8]
[8].length = 1
length is 1, Passes

## Passing Cells
cell(first_row, fourth_column): [5]
cell(first_row, fifth_column): [7]
cell(second_row, second_column): [8]

# STEP_FOUR: Grouping Cells with Corresponding Rows
first_row: [0,4,0,0,0,0,0,8,0]
cell(first_row, fourth_column): [5]
cell(first_row, fifth_column): [7]

second_row: [9,0,0,0,6,1,0,0,0]
cell(second_row, second_column): [8]

# STEP_FIVE: Applying Cell Updates to Rows
## 1 of 3
first_row: [0,4,0,0,0,0,0,8,0]
cell(first_row, fourth_column): [5]
The 4th position of the first_row is 0, so we can proceed.
There are 4 - 1 = 3 elements before the current cell
There are also 9 - 4 = 5 elements after the current cell
So we break the current row into three groups of 3, then 1, then 5 elements
first_row_isolated = [0,4,0] + [0] + [0,0,0,8,0]
Then we update the middle isolated cell to become [5]
updated_first_row_isolated = [0,4,0] + [5] + [0,0,0,8,0]
updated_first_row = [0,4,0,5,0,0,0,8,0]

## 2 of 3
first_row: [0,4,0,5,0,0,0,8,0]
cell(first_row, fifth_column): [7]
The 5th position of the first_row is 0, so we can proceed.
There are 5 - 1 = 4 elements before the current cell
There are also 9 - 5 = 4 elements after the current cell
So we break the current row into three groups of 4, then 1, then 4 elements
first_row_isolated = [0,4,0,5] + [0] + [0,0,8,0]
Then we update the middle isolated cell to become [7]
updated_first_row_isolated = [0,4,0,5] + [7] + [0,0,8,0]
updated_first_row = [0,4,0,5,7,0,8,0]

## 3 of 3
second_row: [9,0,0,0,6,1,0,0,0]
cell(second_row, second_column): [8]
The 2nd position of the second_row is 0, so we can proceed.
There are 2 - 1 = 1 elements before the current cell
There are also 9 - 2 = 7 elements after the current cell
So we break the current row into three groups of 1, then 1, then 7 elements
second_row_isolated = [9] + [0] + [0,0,6,1,0,0,0]
Then we update the middle isolated cell to become [8]
updated_second_row_isolated = [9] + [8] + [0,0,6,1,0,0,0]
updated_second_row = [9,8,0,0,6,1,0,0,0]

# STEP_SIX: Printing the Updated Sudoku
The rows to update are first_row and second_row
Using the contents of updated_first_row and updated_second_row
first_row: [0,4,0,5,7,0,8,0]
second_row: [9,8,0,0,6,1,0,0,0]
third_row: [0,1,5,2,8,0,0,4,6]
fourth_row: [0,7,0,3,9,4,6,5,0]
fifth_row: [0,6,0,7,0,8,0,0,3]
sixth_row: [0,0,8,1,5,6,0,0,0]
seventh_row: [0,3,9,0,0,7,0,2,0]
eighth_row: [4,5,7,8,0,2,0,6,9]
ninth_row: [8,2,6,9,3,0,0,1,4]

# STEP_SEVEN: Shifting the Rows of the Sudoku
fourth_row: [0,7,0,3,9,4,6,5,0]
fifth_row: [0,6,0,7,0,8,0,0,3]
sixth_row: [0,0,8,1,5,6,0,0,0]
seventh_row: [0,3,9,0,0,7,0,2,0]
eighth_row: [4,5,7,8,0,2,0,6,9]
ninth_row: [8,2,6,9,3,0,0,1,4]
first_row: [0,4,0,5,7,0,8,0]
second_row: [9,8,0,0,6,1,0,0,0]
third_row: [0,1,5,2,8,0,0,4,6]

# STEP_EIGHT Fixing the Row Names and Outputting the Sudoku
<Output>
first_row: [0,7,0,3,9,4,6,5,0]
second_row: [0,6,0,7,0,8,0,0,3]
third_row: [0,0,8,1,5,6,0,0,0]
fourth_row: [0,3,9,0,0,7,0,2,0]
fifth_row: [4,5,7,8,0,2,0,6,9]
sixth_row: [8,2,6,9,3,0,0,1,4]
seventh_row: [0,4,0,5,7,0,8,0]
eighth_row: [9,8,0,0,6,1,0,0,0]
ninth_row: [0,1,5,2,8,0,0,4,6]
</Output>
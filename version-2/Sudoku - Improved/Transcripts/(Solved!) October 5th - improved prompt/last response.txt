# STEP_ONE Extracting Previous Results
cell(first_row, first_column)
first_row_candidates = [3,9]
first_column_candidates = [3]
top_left_block_candidates = [3,6]

cell(first_row, eighth_column)
first_row_candidates = [3,9]
eighth_column_candidates = [9]
top_right_block_candidates = [8,9]

cell(second_row, third_column)
second_row_candidates = [6,8]
third_column_candidates = [6]
top_left_block_candidates = [3,6]

cell(second_row, ninth_column)
second_row_candidates = [6,8]
ninth_column_candidates = [8]
top_right_block_candidates = [8,9]

# STEP_TWO Calculating the candidates of each cell
## Cell 1 of 4
cell(first_row, first_column):

first_row_candidates.length = 2
first_column_candidates.length = 1
top_left_block_candidates.length = 2

shortest_list = first_column_candidates = digits to search

first_row_candidates = [3,9], broken into first_row_candidates_low = [3] and first_row_candidates_high = [9]
first_column_candidates = [3], broken into first_column_candidates_low = [3] and first_column_candidates_high = []
top_left_block_candidates = [3,6], broken into top_left_block_candidates_low = [3] and top_left_block_candidates_high = [6]

Checking first_column_candidates_low digits against: first_row_candidates_low and top_left_block_candidates_low
3: [3].count(3) = 1, [3].count(3) = 1, total_count(3) = 2 FOUND A CANDIDATE

Checking first_column_candidates_high digits against: first_row_candidates_high and top_left_block_candidates_high
No high digits to check.

Confirmed candidates found for cell(first_row, first_column): [3]

## Cell 2 of 4
cell(first_row, eighth_column):

first_row_candidates.length = 2
eighth_column_candidates.length = 1
top_right_block_candidates.length = 2

shortest_list = eighth_column_candidates = digits to search

first_row_candidates = [3,9], broken into first_row_candidates_low = [3] and first_row_candidates_high = [9]
eighth_column_candidates = [9], broken into eighth_column_candidates_low = [] and eighth_column_candidates_high = [9]
top_right_block_candidates = [8,9], broken into top_right_block_candidates_low = [8] and top_right_block_candidates_high = [9]

Checking eighth_column_candidates_low digits against: first_row_candidates_low and top_right_block_candidates_low
No low digits to check.

Checking eighth_column_candidates_high digits against: first_row_candidates_high and top_right_block_candidates_high
9: [9].count(9) = 1, [9].count(9) = 1, total_count(9) = 2 FOUND A CANDIDATE

Confirmed candidates found for cell(first_row, eighth_column): [9]

## Cell 3 of 4
cell(second_row, third_column):

second_row_candidates.length = 2
third_column_candidates.length = 1
top_left_block_candidates.length = 2

shortest_list = third_column_candidates = digits to search

second_row_candidates = [6,8], broken into second_row_candidates_low = [] and second_row_candidates_high = [6,8]
third_column_candidates = [6], broken into third_column_candidates_low = [] and third_column_candidates_high = [6]
top_left_block_candidates = [3,6], broken into top_left_block_candidates_low = [3] and top_left_block_candidates_high = [6]

Checking third_column_candidates_low digits against: second_row_candidates_low and top_left_block_candidates_low
No low digits to check.

Checking third_column_candidates_high digits against: second_row_candidates_high and top_left_block_candidates_high
6: [6,8].count(6) = 1, [6].count(6) = 1, total_count(6) = 2 FOUND A CANDIDATE

Confirmed candidates found for cell(second_row, third_column): [6]

## Cell 4 of 4
cell(second_row, ninth_column):

second_row_candidates.length = 2
ninth_column_candidates.length = 1
top_right_block_candidates.length = 2

shortest_list = ninth_column_candidates = digits to search

second_row_candidates = [6,8], broken into second_row_candidates_low = [] and second_row_candidates_high = [6,8]
ninth_column_candidates = [8], broken into ninth_column_candidates_low = [] and ninth_column_candidates_high = [8]
top_right_block_candidates = [8,9], broken into top_right_block_candidates_low = [8] and top_right_block_candidates_high = [9]

Checking ninth_column_candidates_low digits against: second_row_candidates_low and top_right_block_candidates_low
No low digits to check.

Checking ninth_column_candidates_high digits against: second_row_candidates_high and top_right_block_candidates_high
8: [6,8].count(8) = 1, [8,9].count(8) = 1, total_count(8) = 2 FOUND A CANDIDATE

Confirmed candidates found for cell(second_row, ninth_column): [8]

# STEP_THREE Checking the number of elements in each cell
cell(first_row, first_column): [3]
[3].length = 1
length is 1, Passes

cell(first_row, eighth_column): [9]
[9].length = 1
length is 1, Passes

cell(second_row, third_column): [6]
[6].length = 1
length is 1, Passes

cell(second_row, ninth_column): [8]
[8].length = 1
length is 1, Passes

## Passing Cells
cell(first_row, first_column): [3]
cell(first_row, eighth_column): [9]
cell(second_row, third_column): [6]
cell(second_row, ninth_column): [8]

# STEP_FOUR: Grouping Cells with Corresponding Rows
first_row: [0,5,8,6,7,4,2,0,1]
cell(first_row, first_column): [3]
cell(first_row, eighth_column): [9]

second_row: [1,4,0,9,5,2,3,7,0]
cell(second_row, third_column): [6]
cell(second_row, ninth_column): [8]

# STEP_FIVE: Applying Cell Updates to Rows
## 1 of 4
first_row: [0,5,8,6,7,4,2,0,1]
cell(first_row, first_column): [3]
The first_column is index 0 of first_row
first_row[0] == 0, so we can proceed.
Updating index 0 to 3
now first_row is [3,5,8,6,7,4,2,0,1]

## 2 of 4
first_row: [3,5,8,6,7,4,2,0,1]
cell(first_row, eighth_column): [9]
The eighth_column is index 7 of first_row
first_row[7] == 0, so we can proceed.
Updating index 7 to 9
now first_row is [3,5,8,6,7,4,2,9,1]

## 3 of 4
second_row: [1,4,0,9,5,2,3,7,0]
cell(second_row, third_column): [6]
The third_column is index 2 of second_row
second_row[2] == 0, so we can proceed.
Updating index 2 to 6
now second_row is [1,4,6,9,5,2,3,7,0]

## 4 of 4
second_row: [1,4,6,9,5,2,3,7,0]
cell(second_row, ninth_column): [8]
The ninth_column is index 8 of second_row
second_row[8] == 0, so we can proceed.
Updating index 8 to 8
now second_row is [1,4,6,9,5,2,3,7,8]

# STEP_SIX: Printing the Updated Sudoku
The rows to update are first_row and second_row
Using the contents of updated_first_row and updated_second_row
first_row: [3,5,8,6,7,4,2,9,1]
second_row: [1,4,6,9,5,2,3,7,8]
third_row: [9,2,7,8,3,1,4,5,6]
fourth_row: [8,7,3,5,2,6,1,4,9]
fifth_row: [5,6,4,3,1,9,8,2,7]
sixth_row: [2,9,1,7,4,8,6,3,5]
seventh_row: [7,1,2,4,8,5,9,6,3]
eighth_row: [6,8,5,2,9,3,7,1,4]
ninth_row: [4,3,9,1,6,7,5,8,2]

# STEP_SEVEN: Shifting the Rows of the Sudoku
fourth_row: [8,7,3,5,2,6,1,4,9]
fifth_row: [5,6,4,3,1,9,8,2,7]
sixth_row: [2,9,1,7,4,8,6,3,5]
seventh_row: [7,1,2,4,8,5,9,6,3]
eighth_row: [6,8,5,2,9,3,7,1,4]
ninth_row: [4,3,9,1,6,7,5,8,2]
first_row: [3,5,8,6,7,4,2,9,1]
second_row: [1,4,6,9,5,2,3,7,8]
third_row: [9,2,7,8,3,1,4,5,6]

# STEP_EIGHT Fixing the Row Names and Outputting the Sudoku
<Output>
first_row: [8,7,3,5,2,6,1,4,9]
second_row: [5,6,4,3,1,9,8,2,7]
third_row: [2,9,1,7,4,8,6,3,5]
fourth_row: [7,1,2,4,8,5,9,6,3]
fifth_row: [6,8,5,2,9,3,7,1,4]
sixth_row: [4,3,9,1,6,7,5,8,2]
seventh_row: [3,5,8,6,7,4,2,9,1]
eighth_row: [1,4,6,9,5,2,3,7,8]
ninth_row: [9,2,7,8,3,1,4,5,6]
</Output>
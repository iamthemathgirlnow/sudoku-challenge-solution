first_row: [1, 2, 3, 4, 5, 6, 7, 8, 9]
second_row: [4, 5, 6, 7, 8, 9, 1, 2, 3]
third_row: [7, 8, 9, 1, 2, 3, 4, 5, 6]

fourth_row: [2, 3, 4, 5, 6, 7, 8, 9, 1]
fifth_row: [5, 6, 7, 8, 9, 1, 2, 3, 4]
sixth_row: [8, 9, 1, 2, 3, 4, 5, 6, 7]

seventh_row: [3, 4, 5, 6, 7, 8, 9, 1, 2]
eighth_row: [6, 7, 8, 9, 1, 2, 3, 4, 5]
ninth_row: [9, 1, 2, 3, 4, 5, 6, 7, 8]

first_row:  [1, 2, 3, 4, 5, 6, _, _, 9]
second_row: [4, 5, 6, 7, 8, 9, 1, 2, 3]
third_row:  [7, 8, _, 1, 2, 3, 4, 5, 6]
fourth_row: [2, 3, 4, 5, 6, 7, 8, _, 1]
fifth_row:  [5, 6, 7, 8, 9, 1, 2, 3, 4]
sixth_row:  [8, 9, 1, 2, _, 4, 5, 6, 7]
seventh_row [3, 4, 5, 6, 7, 8, 9, 1, 2]
eighth_row: [6, 7, 8, 9, 1, 2, 3, _, 5]
ninth_row:  [9, 1, 2, _, 4, 5, _, 7, 8]

first_row: [1, 2, 3, 4, 5, 6, _, _, 9]
second_row: [4, 5, 6, 7, 8, 9, 1, 2, 3]
third_row: [7, 8, _, 1, 2, 3, 4, 5, 6]
fourth_row: [2, 3, 4, 5, 6, 7, 8, _, 1]
fifth_row: [5, 6, 7, 8, 9, 1, 2, 3, 4]
sixth_row: [8, 9, 1, 2, _, 4, 5, 6, 7]
seventh_row: [3, 4, 5, 6, 7, 8, 9, 1, 2]
eighth_row: [6, 7, 8, 9, 1, 2, 3, _, 5]
ninth_row: [9, 1, 2, _, 4, 5, _, 7, 8]

first_row: [1,2,3,4,5,6,_,_,9]
second_row: [4,5,6,7,8,9,1,2,3]
third_row: [7,8,_,1,2,3,4,5,6]
fourth_row: [2,3,4,5,6,7,8,_,1]
fifth_row: [5,6,7,8,9,1,2,3,4]
sixth_row: [8,9,1,2,_,4,5,6,7]
seventh_row: [3,4,5,6,7,8,9,1,2]
eighth_row: [6,7,8,9,1,2,3,_,5]
ninth_row: [9,1,2,_,4,5,_,7,8]

first_row: [[1, 2, 3], [4, 5, 6], [_, _, 9]]
second_row: [[4, 5, 6], [7, 8, 9], [1, 2, 3]]
third_row: [[7, 8, _], [1, 2, 3], [4, 5, 6]]
fourth_row: [[2, 3, 4], [5, 6, 7], [8, _, 1]]
fifth_row: [[5, 6, 7], [8, 9, 1], [2, 3, 4]]
sixth_row: [[8, 9, 1], [2, _, 4], [5, 6, 7]]
seventh_row: [[3, 4, 5], [6, 7, 8], [9, 1, 2]]
eighth_row: [[6, 7, 8], [9, 1, 2], [3, _, 5]]
ninth_row: [[9, 1, 2], [_, 4, 5], [_, 7, 8]]

first_row:   [[1, 2, 3], [4, 5, 6], [_, _, 9]]
second_row:  [[4, 5, 6], [7, 8, 9], [1, 2, 3]]
third_row:   [[7, 8, _], [1, 2, 3], [4, 5, 6]]
fourth_row:  [[2, 3, 4], [5, 6, 7], [8, _, 1]]
fifth_row:   [[5, 6, 7], [8, 9, 1], [2, 3, 4]]
sixth_row:   [[8, 9, 1], [2, _, 4], [5, 6, 7]]
seventh_row: [[3, 4, 5], [6, 7, 8], [9, 1, 2]]
eighth_row:  [[6, 7, 8], [9, 1, 2], [3, _, 5]]
ninth_row:   [[9, 1, 2], [_, 4, 5], [_, 7, 8]]

first_row: [[1,2,3], [4,5,6], [_,_,9]]
second_row: [[4,5,6], [7,8,9], [1,2,3]]
third_row: [[7,8,_], [1,2,3], [4,5,6]]
fourth_row: [[2,3,4], [5,6,7], [8,_,1]]
fifth_row: [[5,6,7], [8,9,1], [2,3,4]]
sixth_row: [[8,9,1], [2,_,4], [5,6,7]]
seventh_row: [[3,4,5], [6,7,8], [9,1,2]]
eighth_row: [[6,7,8], [9,1,2], [3,_,5]]
ninth_row: [[9,1,2], [_,4,5], [_,7,8]]

[1,2,3,4,5,6,0,0,9]
[4,5,6,7,8,9,1,2,3]
[7,8,0,1,2,3,4,5,6]
[2,3,4,5,6,7,8,0,1]
[5,6,7,8,9,1,2,3,4]
[8,9,1,2,0,4,5,6,7]
[3,4,5,6,7,8,9,1,2]
[6,7,8,9,1,2,3,0,5]
[9,1,2,0,4,5,0,7,8]


Remember: the elements in the chunks are made from three elements each from Three Different Rows, NOT just from a single row. So the top_left_chunk in this example would be [1,2,3,4,5,6,7,8,_], with [1,2,3] from the first_row left-three-columns, [4,5,6] from the second_row left-three-columns, and [7,8,_] from the third_row left-three-columns.
When you get to this part, start by explicitely writing out "I am paying EXTRA ATTENTION TO THE CHUNCKS as they are the hardest part"
top_left_3-by-3_chunk: [1,2,3,4,5,6,7,8,_] missing [9] (remember, these are from the first, second, AND third rows)
top_middle_3-by-3_chunk: [4,5,6,7,8,9,1,2,3] missing []
top_right_3-by-3_chunk: [_,_,9,1,2,3,4,5,6] missing [7,8]
middle_left_3-by-3_chunk: [2,3,4,5,6,7,8,9,1] missing []


(position order checking. Having this messed up the columns)
For stability, we Need the missing elements to be in Position order (left to right and/or top to bottom)
If you list the missing elements out of Position order, immediately add the correct order, such as '[8,7] giving [7,8]'.
This is Position order, NOT necessarily digit order. Digit order Does Not Matter, as long as we get all missing elements.
Do this Position order correction for the rows, columns, and blocks, whenever you have put them out of Position order.


(this intro broke columns onwards for some reason)
We are going to analyze a sudoku style puzzle.
Our analysis will come down to one thing, finding the candidate elements for each unfilled cell.
To do this, examine the nine rows, the nine columns, and the nine blocks, and find the elements present and Not present in that set.
Then, for each unfilled cell, examine the elements Not present in the row, column, and 3-by-3 block associated with that cell, combine them into a set of common candidates, and check to see whether or not there is Exactly one candidate in that set. Everything else follows from that.



(listing the unfilled squares)
first_row:
columns: seventh, eighth
second_row:
columns: None
third_row:
columns: third
...
and do this for all nine rows



(for if we need to stabilize referencing the blocks)
Remember, to figure out the blocks:
top_left_block = first, second, third rows and first, second, third columns



(first_row, seventh_column):
first_row: [1,2,3,4,5,6,_,_,9]
seventh_column: [_,1,4,8,2,5,9,3,_]
top_right_block.flattened: [_,_,9,1,2,3,4,5,6]
STEP_A = all_digits.difference(first_row) = [1,2,3,4,5,6,7,8,9].difference([1,2,3,4,5,6,_,_,9]) = [7,8]
STEP_B = STEP_A.difference(seventh_column) = [7,8].difference([_,1,4,8,2,5,9,3,_]) = [7]
STEP_C = STEP_B.difference(top_right_block.flattened) = [7].difference([_,_,9,1,2,3,4,5,6]) = [7]
first_row_seventh_column_candidate_elements = STEP_C: [7]

(first_row, eighth_column):
first_row: [1,2,3,4,5,6,_,_,9]
eighth_column: [_,2,5,_,3,6,1,_,7]
top_right_block.flattened: [_,_,9,1,2,3,4,5,6]
STEP_A = all_digits.difference(first_row) = [1,2,3,4,5,6,7,8,9].difference([1,2,3,4,5,6,_,_,9]) = [7,8]
STEP_B = STEP_A.difference(eighth_column) = [7,8].difference([_,2,5,_,3,6,1,_,7]) = [8]
STEP_C = STEP_B.difference(top_right_block.flattened) = [8].difference([_,_,9,1,2,3,4,5,6]) = [8]
first_row_eighth_column_candidate_elements = STEP_C: [8]


(first_row, seventh_column):
first_row: [1,2,3,4,5,6,0,0,9]
seventh_column: [0,1,4,8,2,5,9,3,0]
top_right_block.flattened: [0,0,9,1,2,3,4,5,6]
STEP_A = all_digits.difference(first_row) = [7,8]
STEP_B = STEP_A.difference(seventh_column) = [7]
STEP_C = STEP_B.difference(top_right_block.flattened) = [7]
first_row_seventh_column_candidate_elements = STEP_C: [7]

(first_row, eighth_column):
first_row: [1,2,3,4,5,6,0,0,9]
eighth_column: [0,2,5,0,3,6,1,0,7]
top_right_block.flattened: [0,0,9,1,2,3,4,5,6]
STEP_A = all_digits.difference(first_row) = [7,8]
STEP_B = STEP_A.difference(eighth_column) = [8]
STEP_C = STEP_B.difference(top_right_block.flattened) = [8]
first_row_eighth_column_candidate_elements = STEP_C: [8]


### first_row, 1 of 6! (replace 6 with the number of rows containing any zeroes)
(first_row, seventh_column):
first_row_missing_elements: [7,8]
seventh_column_missing_elements: [6,7]
top_right_block_missing_elements: [7,8]
STEP_A = first_row_missing_elements.intersection(seventh_column_missing_elements) = [7,8].intersection([6,7]) = [7]
STEP_B = STEP_A.intersection(top_right_block_missing_elements) = [7].intersection([7,8]) = [7]
Common_missing_elements = STEP_B: [7]

(first_row seventh_column candidates): [7]

(first_row, eighth_column):
first_row_missing_elements: [7,8]
eighth_column_missing_elements: [8,4,9]
top_right_block_missing_elements: [7,8]
STEP_A = first_row_missing_elements.intersection(eighth_column_missing_elements) = [7,8].intersection([8,4,9]) = [8]
STEP_B = STEP_A.intersection(top_right_block_missing_elements) = [8].intersection([7,8]) = [8]
Common_missing_elements = STEP_B: [8]
...
and do this for All unfilled squares


Use the EXACT format:
There are 6 rows with unfilled squares: (in our example, your number may differ)
### first_row, 1 of 6! (replace 6 with the number of rows containing any zeroes) (print the row heading only at the Start of each row)
(first_row, seventh_column):
first_row_missing_elements: [7,8]
seventh_column_missing_elements: [6,7] STEP_A: first_row_missing_elements.intersection(seventh_column_missing_elements) = [7]
top_right_block_missing_elements: [7,8] STEP_B = STEP_A.intersection(top_right_block_missing_elements) = [7] = common_missing_elements
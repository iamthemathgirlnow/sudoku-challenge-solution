# Board State
## Rows
all_digits = [1,2,3,4,5,6,7,8,9]

first_row: [0,4,1,6,7,0,2,5,8] first_row_missing_elements: all_digits.difference(first_row) = [3,9]
second_row: [0,0,0,0,0,0,0,0,3] second_row_missing_elements: all_digits.difference(second_row) = [1,2,4,5,6,7,8,9]
third_row: [7,0,0,0,5,2,6,0,0] third_row_missing_elements: all_digits.difference(third_row) = [1,3,4,8,9]
fourth_row: [2,0,4,0,0,0,0,8,0] fourth_row_missing_elements: all_digits.difference(fourth_row) = [1,3,5,6,7,9]
fifth_row: [0,0,0,0,0,0,0,6,4] fifth_row_missing_elements: all_digits.difference(fifth_row) = [1,2,3,5,7,8,9]
sixth_row: [0,1,0,0,3,0,0,2,0] sixth_row_missing_elements: all_digits.difference(sixth_row) = [4,5,6,7,8,9]
seventh_row: [0,3,0,0,8,0,4,9,0] seventh_row_missing_elements: all_digits.difference(seventh_row) = [1,2,5,6,7]
eighth_row: [0,9,2,0,4,1,0,0,0] eighth_row_missing_elements: all_digits.difference(eighth_row) = [3,5,6,7,8]
ninth_row: [0,6,0,7,0,9,0,0,5] ninth_row_missing_elements: all_digits.difference(ninth_row) = [1,2,3,4,8]

## Columns
all_digits = [1,2,3,4,5,6,7,8,9]

first_column: [0,0,7,2,0,0,0,0,0] first_column_missing_elements: all_digits.difference([0,0,7,2,0,0,0,0,0]) = [1,3,4,5,6,8,9]
second_column: [4,0,0,0,0,1,3,9,6] second_column_missing_elements: all_digits.difference([4,0,0,0,0,1,3,9,6]) = [2,5,7,8]
third_column: [1,0,0,4,0,0,0,2,0] third_column_missing_elements: all_digits.difference([1,0,0,4,0,0,0,2,0]) = [3,5,6,7,8,9]
fourth_column: [6,0,0,0,0,0,0,0,7] fourth_column_missing_elements: all_digits.difference([6,0,0,0,0,0,0,0,7]) = [1,2,3,4,5,8,9]
fifth_column: [7,0,5,0,0,3,8,4,0] fifth_column_missing_elements: all_digits.difference([7,0,5,0,0,3,8,4,0]) = [1,2,6,9]
sixth_column: [0,0,2,0,0,0,0,1,9] sixth_column_missing_elements: all_digits.difference([0,0,2,0,0,0,0,1,9]) = [3,4,5,6,7,8]
seventh_column: [2,0,6,0,0,0,4,0,0] seventh_column_missing_elements: all_digits.difference([2,0,6,0,0,0,4,0,0]) = [1,3,5,7,8,9]
eighth_column: [5,0,0,8,6,2,9,0,0] eighth_column_missing_elements: all_digits.difference([5,0,0,8,6,2,9,0,0]) = [1,3,4,7]
ninth_column: [8,3,0,0,4,0,0,0,5] ninth_column_missing_elements: all_digits.difference([8,3,0,0,4,0,0,0,5]) = [1,2,6,7,9]

## Blocks
all_digits = [1,2,3,4,5,6,7,8,9]

top_left_block (rows: first, second, third; columns: first, second, third):
[[0,4,1],
[0,0,0],
[7,0,0]]
top_left_missing_elements: all_digits.difference(top_left_block) = [2,3,5,6,8,9]

top_middle_block (rows: first, second, third; columns: fourth, fifth, sixth):
[[6,7,0],
[0,0,0],
[0,5,2]]
top_middle_missing_elements: all_digits.difference(top_middle_block) = [1,3,4,8,9]

top_right_block (rows: first, second, third; columns: seventh, eighth, ninth):
[[2,5,8],
[0,0,3],
[6,0,0]]
top_right_missing_elements: all_digits.difference(top_right_block) = [1,4,7,9]

middle_left_block (rows: fourth, fifth, sixth; columns: first, second, third):
[[2,0,4],
[0,0,0],
[0,1,0]]
middle_left_missing_elements: all_digits.difference(middle_left_block) = [3,5,6,7,8,9]

middle_middle_block: (rows: fourth, fifth, sixth; columns: fourth, fifth, sixth)
[[0,0,0],
[0,0,0],
[0,3,0]]
middle_middle_block_missing_elements: all_digits.difference(middle_middle_block) = [1,2,4,5,6,7,8,9]

middle_right_block: (rows: fourth, fifth, sixth; columns: seventh, eighth, ninth)
[[0,8,0],
[0,6,4],
[0,2,0]]
middle_right_block_missing_elements: all_digits.difference(middle_right_block) = [1,3,5,7,9]

bottom_left_block: (rows: seventh, eighth, ninth; columns: first, second, third)
[[0,3,0],
[0,9,2],
[0,6,0]]
bottom_left_block_missing_elements: all_digits.difference(bottom_left_block) = [1,4,5,7,8]

bottom_middle_block: (rows: seventh, eighth, ninth; columns: fourth, fifth, sixth)
[[0,8,0],
[0,4,1],
[7,0,9]]
bottom_middle_block_missing_elements: all_digits.difference(bottom_middle_block) = [2,3,5,6]

bottom_right_block: (rows: seventh, eighth, ninth; columns: seventh, eighth, ninth)
[[4,9,0],
[0,0,0],
[0,0,5]]
bottom_right_block_missing_elements: all_digits.difference(bottom_right_block) = [1,2,3,6,7,8]

# Candidate analysis
## Listing the position of non-filled squares
For each row we do the following calculations:

first_row_unfilled_positions: [0,4,1,6,7,0,2,5,8].position(0) = [1,6]
first_row_unfilled_columns: first, sixth

second_row_unfilled_positions: [0,0,0,0,0,0,0,0,3].position(0) = [1,2,3,4,5,6,7,8]
second_row_unfilled_columns: first, second, third, fourth, fifth, sixth, seventh, eighth

third_row_unfilled_positions: [7,0,0,0,5,2,6,0,0].position(0) = [2,3,4,8,9]
third_row_unfilled_columns: second, third, fourth, eighth, ninth

fourth_row_unfilled_positions: [2,0,4,0,0,0,0,8,0].position(0) = [2,4,5,6,7,9]
fourth_row_unfilled_columns: second, fourth, fifth, sixth, seventh, ninth

fifth_row_unfilled_positions: [0,0,0,0,0,0,0,6,4].position(0) = [1,2,3,4,5,6,7]
fifth_row_unfilled_columns: first, second, third, fourth, fifth, sixth, seventh

sixth_row_unfilled_positions: [0,1,0,0,3,0,0,2,0].position(0) = [1,3,4,6,7,9]
sixth_row_unfilled_columns: first, third, fourth, sixth, seventh, ninth

seventh_row_unfilled_positions: [0,3,0,0,8,0,4,9,0].position(0) = [1,3,4,6,9]
seventh_row_unfilled_columns: first, third, fourth, sixth, ninth

eighth_row_unfilled_positions: [0,9,2,0,4,1,0,0,0].position(0) = [1,4,7,8,9]
eighth_row_unfilled_columns: first, fourth, seventh, eighth, ninth

ninth_row_unfilled_positions: [0,6,0,7,0,9,0,0,5].position(0) = [1,3,5,7,8]
ninth_row_unfilled_columns: first, third, fifth, seventh, eighth

## Calculate the number of unfilled squares
total_unfilled_squares = 2 + 8 + 5 + 6 + 7 + 6 + 5 + 5 + 5 = 49

Then we cap the number of squares to list
number_of_squares_to_list = min(total_unfilled_squares, 3) = 3

## Common candidates in each non-filled square
### 1 of 3
(first_row, first_column):
Using first_row_missing_elements, first_column_missing_elements, and top_left_block_missing_elements
STEP_A: [3,9].intersection([1,3,4,5,6,8,9]) = [3,9]
STEP_B = [3,9].intersection([2,3,5,6,8,9]) = [3,9] = common_missing_elements

### 2 of 3
(first_row, sixth_column):
Using first_row_missing_elements, sixth_column_missing_elements, and top_middle_block_missing_elements
STEP_A: [3,9].intersection([3,4,5,6,7,8]) = [3]
STEP_B = [3].intersection([1,3,4,8,9]) = [3] = common_missing_elements

### 3 of 3
(second_row, first_column):
Using second_row_missing_elements, first_column_missing_elements, and top_left_block_missing_elements
STEP_A: [1,2,4,5,6,7,8,9].intersection([1,3,4,5,6,8,9]) = [1,4,5,6,8,9]
STEP_B = [1,4,5,6,8,9].intersection([2,3,5,6,8,9]) = [5,6,8,9] = common_missing_elements

Finished printing 3 out of 3 squares

# Wrapping up
## Squares with exactly one common_missing_element
(first_row, sixth_column): [3]

## Print the updated sudoku
first_row: [0,4,1,6,7,3,2,5,8]
second_row: [0,0,0,0,0,0,0,0,3]
third_row: [7,0,0,0,5,2,6,0,0]
fourth_row: [2,0,4,0,0,0,0,8,0]
fifth_row: [0,0,0,0,0,0,0,6,4]
sixth_row: [0,1,0,0,3,0,0,2,0]
seventh_row: [0,3,0,0,8,0,4,9,0]
eighth_row: [0,9,2,0,4,1,0,0,0]
ninth_row: [0,6,0,7,0,9,0,0,5]
We are going to analyze a sudoku style puzzle.
Our analysis will come down to one thing, finding the candidate elements for each unfilled square.
To do this, examine the nine rows, the nine columns, and the nine blocks, and find the elements present and Not present in that set.
Then, for each non-filled square, examine the elements Not present in the row, column, and 3-by-3 block associated with that square, combine them into a set of common candidates, and check to see whether or not there is Exactly one candidate in that set. Everything else follows from that.

# Board State
Trying to play without vision is difficult, so I want you to follow a very specific format.
I want you to print out the current board state using the _exact_ format (replace content with actual game):
## Rows
all_digits = [1,2,3,4,5,6,7,8,9]

first_row: [1,2,3,4,5,6,0,0,9] missing elements: all_digits.difference(first_row) = [7,8]
second_row: [4,5,6,7,8,9,1,2,3] missing elements: all_digits.difference(second_row) = []
third_row: [7,8,0,1,2,3,4,5,6] missing elements: all_digits.difference(third_row) = [9]
fourth_row: [2,3,4,5,6,7,8,0,1] missing elements: all_digits.difference(fourth_row) = [9]
fifth_row: [5,6,7,8,9,1,2,3,4] missing elements: all_digits.difference(fifth_row) = []
sixth_row: [8,9,1,2,0,4,5,6,7] missing elements: all_digits.difference(sixth_row) = [3]
seventh_row: [3,4,5,6,7,8,9,1,2] missing elements: all_digits.difference(seventh_row) = []
eighth_row: [6,7,8,9,1,2,3,0,5] missing elements: all_digits.difference(eighth_row) = [4]
ninth_row: [9,1,2,0,4,5,0,7,8] missing elements: all_digits.difference(ninth_row) = [3,6]

## Columns
first_column: [1,4,7,2,5,8,3,6,9] missing elements: all_digits.difference(first_column) = []
second_column: [2,5,8,3,6,9,4,7,1] missing elements: all_digits.difference(first_column) = [9]
third_column: [3,6,0,4,7,1,5,8,2] missing elements: all_digits.difference(first_column) = []
fourth_column: [4,7,1,5,8,2,6,9,0] missing elements: all_digits.difference(first_column) = [3]
fifth_column: [5,8,2,6,9,0,7,1,4] missing elements: all_digits.difference(first_column) = [3]
sixth_column: [6,9,3,7,1,4,8,2,5] missing elements: all_digits.difference(first_column) = []
seventh_column: [0,1,4,8,2,5,9,3,0] missing elements: all_digits.difference(first_column) = [6,7]
eighth_column: [0,2,5,0,3,6,1,0,7] missing elements: all_digits.difference(first_column) = [4,8,9]
ninth_column: [9,3,6,1,4,7,2,5,8] missing elements: all_digits.difference(first_column) = []

## Blocks
top_left_block:
[[1,2,3],
[4,5,6],
[7,8,0]]
missing elements: all_digits.difference(top_left_block) = [9]

top_middle_block:
[[4,5,6],
[7,8,9],
[1,2,3]]
missing elements: all_digits.difference(top_middle_block) = []

top_right_block:
[[0,0,9],
[1,2,3],
[4,5,6]]
missing elements: all_digits.difference(top_right_block) = [7,8]

middle_left_block:
[[2,3,4],
[5,6,7],
[8,9,1]]
missing elements: all_digits.difference(middle_left_block) = []

middle_middle_block:
[[5,6,7],
[8,9,1],
[2,0,4]]
missing elements: all_digits.difference(middle_middle_block) = [3]

middle_right_block:
[[8,0,1],
[2,3,4],
[5,6,7]]
missing elements: all_digits.difference(middle_right_block) = [9]

bottom_left_block:
[[3,4,5],
[6,7,8],
[9,1,2]]
missing elements: all_digits.difference(bottom_left_block) = []

bottom_middle_block:
[[6,7,8],
[9,1,2],
[0,4,5]]
missing elements: all_digits.difference(bottom_middle_block) = [3]

bottom_right_block:
[[9,1,2],
[3,0,5],
[0,7,8]]
missing elements: all_digits.difference(bottom_right_block) = [4,6]

# Candidate analysis
First section done, take a deep breath.
## Listing the position of non-filled squares
Now that we have the missing elements, we need to find the unfilled squares.
Go through each row and list JUST the column position of each unfilled/zero element (if any) in each row.
first_row: seventh eighth columns
third_row: third column
fourth_row: eighth column
sixth_row: fifth column
eighth_row: eight column
ninth_row: fourth seventh columns

## Common candidates in each non-filled square
Go through each unfilled square and list the missing elements for the row, column, and block containing that square (use the row and column to get the correct block).
After you have listed the three missing element sets for a square, list out the intersection of those sets, the elements that are in All Three listed sets. We do this in two steps to ENSURE we get the correct answer.
Make sure to use the sets you have JUST GENERATED!!! They are the closest and easiest to see, giving you the LEAST mistakes. That's why we wrote them down Right There!
In our example there are 6 rows with unfilled squares:
### first_row, 1 of 6! (replace 6 with the number of rows containing a zero)
(first_row, seventh_column):
first_row_missing_elements: [7,8]
seventh_column_missing_elements: [6,7]
top_right_block_missing_elements: [7,8]
STEP_A = first_row_missing_elements.intersection(seventh_column_missing_elements) = [7,8].intersection([6,7]) = [7]
STEP_B = STEP_A.intersection(top_right_block_missing_elements) = [7].intersection([7,8]) = [7]
Common_missing_elements = STEP_B: [7]

(first_row seventh_column candidates): [7]

(first_row, eighth_column):
first_row_missing_elements: [7,8]
eighth_column_missing_elements: [8,4,9]
top_right_block_missing_elements: [7,8]
STEP_A = first_row_missing_elements.intersection(eighth_column_missing_elements) = [7,8].intersection([8,4,9]) = [8]
STEP_B = STEP_A.intersection(top_right_block_missing_elements) = [8].intersection([7,8]) = [8]
Common_missing_elements = STEP_B: [8]
...
and do this for All unfilled squares

We are currently in the testing phase. Do All sections exactly as instructed above, and then stop.
Make sure to do Every section In Full, starting with printing the board state and ending only After All squares and their common candidates have been listed.
Please do not use code blocks, just plain text with simple headers as in the instructions is fine.

We are analyzing the following sudoku. Make sure to convert it to the Correct format when printing the board state.
041670258
000000003
700052600
204000080
000000064
010030020
030080490
092041000
060709005

Begin
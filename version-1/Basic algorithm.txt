Basic algorithm for version 1


Prompt_A:
- The input to prompt_A is either the initial Sudoku (first time only), or the final 210 tokens of the response to prompt_B

- Print the given Sudoku by the rows
- Find the elements missing from each row
- Print the given Sudoku by the columns
- Find the elements missing from each column
- Print the given Sudoku by the blocks
- Find the elements missing from each block

- Find the positions of the empty cells in each row

- Count the number of empty cells in each row
- Add them together
- Cap this number at 17
(This is the maximum number of empty cells Prompt_A has room to check)

- Iterate through each empty cell (up to a maximum of 17)
- For each cell perform the following:
	- For each cell we are looking at the previously found lists of the elements missing from the row, column, and block corresponding with the given cell
	- Compare row_missing_elements with column_missing_elements
	- Find all elements common to both lists. These are the elements missing from both the row and the column
	- Now compare the list you've just calculated with block_missing_elements
	- Find all elements common to both lists. These are the elements missing from all three of the row, the column, and the block
	- That is, these are the candidate elements for that cell

- When all cells are done, find all the cells which had exactly one candidate element. These are the cells we can update
- List the cells to update along with the missing elements from the row, column, and block of that cell (the ones used to calculate the candidate element)
- List these cells _without_ listing the actual candidate element, otherwise it biases the error checker in prompt_B



Prompt_B:
- Take the last 300 tokens of the response to prompt_A (the results). Prompt_B also has access to the same Sudoku as prompt_A did
- Print the cells found in prompt_A, up to a maximum of 4 (This is the maximum prompt_B has room to process)

- Re-calculate the candidates of the given cells using a more thorough method than prompt_A
	- Iterate through all given cells
	- For each cell, iterate through all digits 1 to 9
	- For each digit, count how many times that digit appears in the given missing_element lists for the row, column, and block
	- Add the counts together (looking for the answer '3')
	- For each cell, find all digits that appeared in all three sets
	- These are the candidate elements for that cell, as they are the digits not present in any of the corresponding row, column, or block

- Count the number of candidate elements found for each cell
	- If a cell has exactly one candidate it passes
	- If a cell does not have exactly one candidate it is Rejected and is not updated

- Update the cells which had exactly one candidate element
	- For each cell to be updated perform the following:
	- Extract the appropriate row from the given Sudoku
	- Examine the digit in the cell of the (non-updated) Sudoku. (The digit that will be overwritten by the update)
	- If that digit is a 0, replace it with the candidate element
	- If that digit is not a 0, Reject the current cell

- Put the updated rows back into the Sudoku
- Shift the top three rows of the Sudoku to the bottom, so they are now the bottom three rows (like cutting a deck of cards)
- This allows prompt_A to check all empty cells over three turns, despite only checking the first 17 empty squares it finds each time

- Output the updated and shifted Sudoku

- Repeat until done